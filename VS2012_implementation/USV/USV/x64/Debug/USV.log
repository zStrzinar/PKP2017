Build started 28.5.2014 22:40:35.
     1>Project "B:\Faks\3. letnik\Ladjica\VS2012_solutions\USV\USV\USV.vcxproj" on node 2 (Build target(s)).
     1>ClCompile:
         C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin\x86_amd64\CL.exe /c /IB:\openCV\build\x64\vc11\..\..\include /I"B:\Faks\3. letnik\Ladjica\mexopencv\include" /Zi /nologo /W3 /WX- /Od /D _WINDLL /D _MBCS /Gm /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Fo"x64\Debug\\" /Fd"x64\Debug\vc110.pdb" /Gd /TP /errorReport:prompt dualmrf_custom.cpp
         dualmrf_custom.cpp
     1>dualmrf_custom.cpp(122): warning C4244: 'argument' : conversion from 'double' to 'int', possible loss of data
     1>dualmrf_custom.cpp(124): warning C4244: 'initializing' : conversion from 'double' to 'int', possible loss of data
     1>dualmrf_custom.cpp(135): warning C4244: 'initializing' : conversion from 'double' to 'int', possible loss of data
     1>dualmrf_custom.cpp(279): warning C4244: 'argument' : conversion from 'double' to 'int', possible loss of data
     1>dualmrf_custom.cpp(316): warning C4244: 'argument' : conversion from 'double' to 'int', possible loss of data
     1>dualmrf_custom.cpp(393): warning C4244: 'argument' : conversion from 'double' to 'int', possible loss of data
     1>dualmrf_custom.cpp(411): warning C4244: 'initializing' : conversion from 'double' to 'int', possible loss of data
     1>dualmrf_custom.cpp(245): warning C4102: 'std' : unreferenced label
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(781): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=int
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
                 b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(428) : see reference to function template instantiation 'cv::Point_<_Tp> MxArray::toPoint_<int>(void) const' being compiled
                 with
                 [
                     _Tp=int
                 ]
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(781): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=float
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
                 b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(431) : see reference to function template instantiation 'cv::Point_<_Tp> MxArray::toPoint_<float>(void) const' being compiled
                 with
                 [
                     _Tp=float
                 ]
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(789): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=float
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
                 b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(434) : see reference to function template instantiation 'cv::Point3_<_Tp> MxArray::toPoint3_<float>(void) const' being compiled
                 with
                 [
                     _Tp=float
                 ]
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(798): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=int
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
                 b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(437) : see reference to function template instantiation 'cv::Size_<_Tp> MxArray::toSize_<int>(void) const' being compiled
                 with
                 [
                     _Tp=int
                 ]
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(807): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=int
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
                 b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(440) : see reference to function template instantiation 'cv::Rect_<_Tp> MxArray::toRect_<int>(void) const' being compiled
                 with
                 [
                     _Tp=int
                 ]
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(813): warning C4267: 'initializing' : conversion from 'size_t' to 'int', possible loss of data
                 b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(443) : see reference to function template instantiation 'cv::Scalar_<_Tp> MxArray::toScalar_<double>(void) const' being compiled
                 with
                 [
                     _Tp=double
                 ]
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(819): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=double
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(820): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=double
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(821): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=double
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
     1>b:\faks\3. letnik\ladjica\mexopencv\include\MxArray.hpp(822): warning C4344: behavior change: use of explicit template arguments results in call to 'T MxArray::at<T>(mwIndex) const'
                 with
                 [
                     T=double
                 ]
                 but the regular function 'MxArray MxArray::at(const std::string &,mwIndex) const' is a better match
                 if you expect 'MxArray MxArray::at(const std::string &,mwIndex) const' to be called then you need to make it an explicit specialization
       Link:
         C:\Program Files (x86)\Microsoft Visual Studio 11.0\VC\bin\x86_amd64\link.exe /ERRORREPORT:PROMPT /OUT:"B:\Faks\3. letnik\Ladjica\VS2012_solutions\USV\x64\Debug\USV.mexw64" /INCREMENTAL /NOLOGO /LIBPATH:B:\openCV\build\x64\vc11\lib /LIBPATH:"B:\Faks\3. letnik\Ladjica\mexopencv\lib" /LIBPATH:"C:\Program Files\MATLAB\R2013a\extern\lib\win64\microsoft" opencv_core248d.lib opencv_imgproc248d.lib opencv_highgui248d.lib opencv_ml248d.lib opencv_video248d.lib opencv_features2d248d.lib opencv_calib3d248d.lib opencv_objdetect248d.lib opencv_contrib248d.lib opencv_legacy248d.lib opencv_flann248d.lib libmx.lib libmex.lib libmat.lib opencv_core248d.lib opencv_imgproc248d.lib opencv_highgui248d.lib opencv_ml248d.lib opencv_video248d.lib opencv_features2d248d.lib opencv_calib3d248d.lib opencv_objdetect248d.lib opencv_contrib248d.lib opencv_legacy248d.lib opencv_flann248d.lib kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:"level='asInvoker' uiAccess='false'" /manifest:embed /DEBUG /PDB:"B:\Faks\3. letnik\Ladjica\VS2012_solutions\USV\x64\Debug\USV.pdb" /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:"B:\Faks\3. letnik\Ladjica\VS2012_solutions\USV\x64\Debug\USV.lib" /MACHINE:X64 /export:mexFunction /DLL x64\Debug\dualmrf_custom.obj
         MxArray.obj
         USV.vcxproj -> B:\Faks\3. letnik\Ladjica\VS2012_solutions\USV\x64\Debug\USV.mexw64
     1>Done Building Project "B:\Faks\3. letnik\Ladjica\VS2012_solutions\USV\USV\USV.vcxproj" (Build target(s)).

Build succeeded.

Time Elapsed 00:00:04.30
